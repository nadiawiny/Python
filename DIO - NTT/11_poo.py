# -*- coding: utf-8 -*-
"""11. POO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zxb3DGSYg2Saka3VkdSNj4gybG7yW0lp

**POO - Programação Orientada a objetos**

Paradigmas de programação - é um estilo e programação. Não é uma linguagem (Oython, java, C, etc), e sim a forma como você soluciona os problemas através dp código.

Alguns paradigmas:
- Imperativo ou procedural
- Funcional
- Orientado a eventos

O paradgma de programação orientada a objetos (POO) estrutura o código abstraindo problemas em objetos do mundo real, facilitando o entendimento do código e tornando-o mais modular e extensível. Os dpis conceitos chaves para aprender POO são: Classes e Objetos

Classe e Objetos - uma classe define as caracteristicas e comportamentos de um objeto, porém não consiguimos usá-las diretamente. Já os objetos podem usá-los e eles podduem as caracteristicas e comportamentos que foram definidos nas classes
"""

## classe - define comportamentos -> latir e dormir e define caracteristicas -> nome, cor
# self -> instância do meu objeto

class cachorro:
  def __init__(self,  nome, cor, acordado =True):
    self.nome = nome
    self.cor = cor
    self.acordado = acordado

  def latir(self):
    print("Auau")

  def dormir(self):
    self.acordado = False
    print("Zzzz...")

#objeto

cao_1 = cachorro("chappie", "amarelo", False)
cao_2 = cachorro("Aladim", "branco e preto")

cao_1.latir()

print(cao_2.acordado)
cao_2.dormir()
print(cao_2.acordado)

"""**Nosso primeiro Programa POO**
-- João tem uma bicicleta e gostaria de registrar as vendas de suas bicicletas. Crie um programa onde jõa informa: cor, modelo, nome e valor da bicicleta vendida. Uma bicicleta pode: buzinar, para e correr. Adicione esses comportamentos!
"""

class bicicleta:
  def __init__(self, cor, modelo, ano, valor):
    self.cor = cor
    self.modelo = modelo
    self.ano = ano
    self.valor = valor

## definindo métodos - funções dentro de uma class

  def buzinar(self):
    print("Plim Plim")

  def parar(self):
    print("biclicleta parada")

  def correr(self):
    print("vrummmm...")

## representação da instancia - os valores do nosso bjetos

  def __str__(self):
    return f"{self.__class__.__name__}: { ', ' .join([f'{chave}={valor}' for chave, valor in self.__dict__.items()])}"

"""
  def __str__(self):
    return f"bicicleta: cor={self.cor}, modelo={self.modelo}, ano={self.ano}, valor={self.valor}"
 """


b1= bicicleta("vermelha", "caloi", 2022, 600)

b1.buzinar()
b1.correr()
b1.parar()

print(b1.cor, b1.modelo, b1.ano, b1.valor)

b2 = bicicleta("verde", "monark", 2000, 180)

b2.buzinar()
#bicicleta.buzinar(b2)

"""**Construtores e Destrutores**
-> Método construtor é executafo quando uma nova instrução da classe é criada. Nesse nétodo inicializamos o estado do nosso objeto. Para declarar o método construtor da classe, criamos um mpetodo com o nome `__init__`
"""

## __init__  -- ececutado no inicio da instância

class cachorro:
  def __init__(self,  nome, cor, acordado =True):
    self.nome = nome
    self.cor = cor
    self.acordado = acordado

"""-> Método destrutor sempre pe executado quando uma instância (objeto) é destruída. Destrutores em Python não são tão necessários quanto em C++ poque o Python tem um coletor de lixo que lida com o gerenciamento de memória automaticamente. Para declarar o mpetodo destrutor da classe, criamos um método com o nome `__del__`"""

## __del__  -- executado no final

class cachorro:
  def __del__(self):
    print("Destruindo a instância")

c = cachorro()
del c

"""**Herança em POO**
--> Em Programação herança é a capacidade de uma classe filha derivar ou herdar as características e comportamentos da classe pai (base).

**Benefícios da herança:**
- Representar bem os relacionamentos do mundo real
- fornecer reutilização de código, não precisamos escrever o mesmo código repetidamente. Além disso, permite adicionar mais recursos a uma classe sem modificá-la.
- É de natureza transitica, o que significa que, se a classe B herda da classe A, todas as subclasses de B herdarão automaticamente da classe A.

Herança simples - quando uma classe filha herda apenas uma classe pai, ela pe chamda de herança simples.

Herança multipla - Quando uma classe filha herda de várias classes pai, ela é chamada de herança múltipla.
"""

## sintaxe da herança  - simples

class A:
  pass

class B(A):
  pass

## herança - multipla

class A:
  pass

class B:
  pass

class c(A, B):
  pass

## simples

class Veiculo:
    def __init__(self, cor, placa, numero_rodas):
        self.cor = cor
        self.placa = placa
        self.numero_rodas = numero_rodas

    def ligar_motor(self):
        print("Ligando o motor")

    def __str__(self):
        return f"{self.__class__.__name__}: {', '.join([f'{chave}={valor}' for chave, valor in self.__dict__.items()])}"


class Motocicleta(Veiculo):
    pass


class Carro(Veiculo):
    pass


class Caminhao(Veiculo):
    def __init__(self, cor, placa, numero_rodas, carregado):
        super().__init__(cor, placa, numero_rodas)
        self.carregado = carregado

    def esta_carregado(self):
        print(f"{'Sim' if self.carregado else 'Não'} estou carregado")


moto = Motocicleta("preta", "abc-1234", 2)
carro = Carro("branco", "xde-0098", 4)
caminhao = Caminhao("roxo", "gfd-8712", 8, True)

print(moto)
print(carro)
print(caminhao)

# multipla

class Animal:
    def __init__(self, nro_patas):
        self.nro_patas = nro_patas

    def __str__(self):
        return f"{self.__class__.__name__}: {', '.join([f'{chave}={valor}' for chave, valor in self.__dict__.items()])}"


class Mamifero(Animal):
    def __init__(self, cor_pelo, **kw):
        self.cor_pelo = cor_pelo
        super().__init__(**kw)


class Ave(Animal):
    def __init__(self, cor_bico, **kw):
        self.cor_bico = cor_bico
        super().__init__(**kw)


class Gato(Mamifero):
    pass


class Ornitorrinco(Mamifero, Ave):
    def __init__(self, cor_bico, cor_pelo, nro_patas):
        super().__init__(cor_pelo=cor_pelo, cor_bico=cor_bico, nro_patas=nro_patas)


gato = Gato(nro_patas=4, cor_pelo="Preto")
print(gato)

ornitorrinco = Ornitorrinco(nro_patas=2, cor_pelo="vermelho", cor_bico="laranja")
print(ornitorrinco)